  trace_setting = Trace('O') /**REXX**/
/**********************************************************************
*  TIOT exec - Ken MacKenzie - May 1998                               *
*                                                                     *
*  This exec will display (or return) a list of all datasets          *
*  allocated to a particular ddname or all datasets allocated to all  *
*  ddnames.  If the exec is entered as a command, the results are     *
*  displayed (using "STEMDISP" or "say" ) or, if the command is       *
*  invoked from another exec, the results are returned as a string    *
*  consisting of the ddname enclosed in asterisks followed by a list  *
*  of dataset names (individually) enclosed in quotes.  Use of this   *
*  exec is faster and a lot less messy than using a combination of    *
*  OUTTRAP and the LISTALC ST H command.  If you don't have STEMDISP  *
*  at your site, you can obtain a copy of Gilbert Saint-Flour's       *
*  version via the CBT (file 183).                                    *
*                                                                     *
*  Additionally, a TABLE parameter can be supplied.  This is in the   *
*  form TABLE(table-name dd-var-name dsn-var-name).  If this          *
*  parameter is supplied, the results are written to an ISPF table    *
*  which can then be used to drive another process.                   *
*---------------------------------------------------------------------*
*  Limited support can be obtained from the author:                   *
*  ken.mackenzie@bigfoot.com                                          *
*---------------------------------------------------------------------*
*  Examples of use can be found at the end of the exec                *
*---------------------------------------------------------------------*
*  Amendment History (Latest First)                                   *
*                                                                     *
*  05 November  2002 - Ken MacKenzie                                  *
*                    - Changed TABLE processing to allow output       *
*                      to a permanent table (via the LIBRARY option)  *
*                                                                     *
*  19 January   2001 - Ken MacKenzie                                  *
*                    - Changed TABLE processing to NOWRITE            *
*                    - Added "Address TSO" to VIEWSTEM procedure      *
*                                                                     *
*  09 January   2001 - Ken MacKenzie                                  *
*                    - Added TABLE processing                         *
*                    - Changed the parameter handling                 *
*                      (/DEBUG has changed to DEBUG(opt))             *
*                      and the TABLE() parameter can now be used      *
*                                                                     *
*  08 January   2001 - Ken MacKenzie                                  *
*                    - Simplify detection of the '/DEBUG'             *
*                      parameter                                      *
*                    - Use an internal routine to VIEW the            *
*                      output if STEMDISP isn't available             *
*                                                                     *
*  04 January   2001 - Ken MacKenzie                                  *
*                    - Updated the comments                           *
*                    - Added a call to STEMDISP                       *
*                    - SWAREQ coding brought in-line                  *
*                    - Added Examples of Use                          *
*                    - Use Numeric Digits 10 to allow for             *
*                      addresses greater than 3B9AC9FF                *
*                    - allow a '/DEBUG' parameter to be               *
*                      supplied                                       *
*                                                                     *
*  15 December  2000 - Ken MacKenzie                                  *
*                    - Turn off tracing                               *
*                                                                     *
*  20 May       1998 - Ken MacKenzie                                  *
*                    - Initial coding                                 *
**********************************************************************/

/**********************************************************************
*  Parm handling has been moved to a called routine: Extract_Parms    *
**********************************************************************/
  true = 1; false = 0
  Call Extract_Parms Arg(1)
  trace_setting = Trace(debug)         /*Set debugging option       */
  Numeric Digits 10                    /*Allow for big addresses    */
  Parse Source . calltype .            /*Determine if we were called*/
  If calltype = 'FUNCTION',            /*as a subroutine and set a  */
   | calltype = 'SUBROUTINE' Then      /*variable as appropriate    */
    subroutine = true
  Else
    subroutine = false

  If tb_required Then
    Do
      If lib_required Then
        libparm = 'LIBRARY('libnam') WRITE'
      Else
        libparm = ''
      Address ISPEXEC
      "TBCREATE" tbnam "NAMES(" tbddn tbdsn ") REPLACE" libparm
    End
  xlen = 0                             /*bypassing jobname/stepnames*/

  If subroutine Then
    xstring =
  Else
    xstring.0 = 0
  ddfound = false
/*******************************************************************
*  Loop through the TIOT looking for DDnames.                      *
*  The first byte of each entry contains the length of that entry  *
*  The first bit of the second byte is on if the entry is not in   *
*  use.                                                            *
*  Bytes  5-12 contain the DDname.                                 *
*  Bytes 13-15 contain the SWA address                             *
*  If there is a requested DD, we use the ddfound flag to control  *
*  whether we've found the requested DD.  This is because          *
*  concatenated files have a blank DDname.                         *
*******************************************************************/
  relno = 0
  Do Forever
    relno = relno + 1
    Call Bpxwdyn 'Info Inrelno('relno') Inrtlst(last)',
      'inrtddn(ddname) inrtdsn(dsname)'
    Select
      When result \= 0 Then
        Leave
      When reqdd = '' Then
        ddfound = true
      When ddname = reqdd Then
        ddfound = true
      When ddname = '' Then
        Nop
      When ddname \= reqdd Then
        If ddfound Then
          Leave
      Otherwise
        Nop
    End
    If \ddfound Then
      iterate
    If subroutine Then
      If ddname \= '' Then
        xstring = xstring '*'Strip(ddname,'T')'*'
    If subroutine Then
      xstring = xstring "'"dsname"'"
    Else
      Do
        xstring.0 = xstring.0 + 1
        If ddname \= '' & xstring.0 \= 1 Then
          Do
            x = Value('xstring.'xstring.0, ' ')
            xstring.0 = xstring.0 + 1
          End
        x = Value('xstring.'xstring.0, Left(ddname,8) dsname)
      End
    If tb_required Then
      Do
        Address ISPEXEC
        Call Value tbddn, ddname
        Call Value tbdsn, dsname
        "TBADD" tbnam
      End
  End
  If tb_required & lib_required Then
    Do
    "TBCLOSE" tbnam "LIBRARY("libnam")"
    "CONTROL ERRORS RETURN"
    "TBOPEN 0H-DEAR LIBRARY(0H-DEAR) NOWRITE"
    End
/********************************************************************
*  If we're running as a subroutine then we simply return a string  *
********************************************************************/
  If Subroutine Then
    Return xstring
/***********************************************************************
*  If we're running as a command then we have to display the           *
*  allocations.                                                        *
*  If we are running under ISPF, we attempt to use "STEMDISP" and, if  *
*  that fails, we use the internal "VIEWSTEM" routine; if that fails,  *
*  we use "say" statements.                                            *
*  If we are running under native TSO, we just use "say" statements.   *
***********************************************************************/
  If reqdd = '' Then                   /*Set                         */
    view_dd = 'all files'              /*    up a                    */
  Else                                 /*         header             */
    view_dd = reqdd                    /*                line        */
  view_header = 'User:' Sysvar(Sysuid) '- file allocations:' view_dd
  If Sysvar(Sysispf) \= 'ACTIVE' Then
    Call Non_Ispf_Display
  Else
    Do
      Signal On Syntax                 /*In case STEMDISP fails      */
      Call 'STEMDISP'  'VIEW', 'XSTRING.',,, view_header
      Signal Off Syntax
    End
  Return 0
Syntax:
/*****************************************************************
*  We come here in the event of a SYNTAX error.  Basically that  *
*  means that the call to STEMDISP failed.                       *
*  So we attempt to use the internal VIEWSTEM.  If that returns  *
*  "true" it worked and we exit; otherwise we continue just      *
*  with "say" statements.                                        *
*****************************************************************/
    Address ISPEXEC "CONTROL DISPLAY LINE START(1)"
    If Viewstem() Then
      Return
Non_Ispf_Display:
/*****************************************************************
*  We come here either by dropping through from the SYNTAX error *
*  routine (above) or when we are running in native TSO          *
*****************************************************************/
  Say view_header
  Do i = 1 To xstring.0
    Say xstring.i
  End
  Return 0
/***************************************************************
 *  The following routine was provided by Gilbert Saint-Flour  *
 *  and later, Sam Golob.                                      *
 *  I have included it as an internal function because it is   *
 *  easier to package that way.                                *
 ***************************************************************/
/*---- REXX ---- */ /*------------------------------------------------*\
|*                                                                    *|
|* MODULE NAME = SWAREQ                                               *|
|*                                                                    *|
|* DESCRIPTIVE NAME = Convert an SVA to a 31-bit address              *|
|*                                                                    *|
|* STATUS = R200                                                      *|
|*                                                                    *|
|* FUNCTION = The SWAREQ function simulates the SWAREQ macro to       *|
|*            convert an SWA Virtual Address (SVA) to a full 31-bit   *|
|*            address which can be used to access SWA control blocks  *|
|*            in the SWA=ABOVE environment.  The input is a 3-byte    *|
|*            SVA; the output value is a 10-digit decimal number.     *|
|*                                                                    *|
|* AUTHOR   =  Gilbert Saint-Flour <gsf@pobox.com>                    *|
|*                                                                    *|
|* DEPENDENCIES = TSO/E V2                                            *|
|*                                                                    *|
|* SYNTAX   =  SWAREQ(sva)                                            *|
|*                                                                    *|
|*             sva must contain a 3-byte SVA.                         *|
|*                                                                    *|
|* Sample Invocation:                                                 *|
|*                                                                    *|
|*    NUMERIC DIGITS 10                                               *|
|*    tcb = C2D(STORAGE(21C,4))         /* TCB          PSATOLD  */   *|
|*    tiot= C2D(STORAGE(D2X(tcb+12),4)) /* TIOT         TCBTIO   */   *|
|*    sva = STORAGE(D2X(tiot+36),3)     /* First JFCB   TIOEJFCB */   *|
|*    jfcb=SWAREQ(sva)             /* convert SVA to 31-bit addr */   *|
|*    dsn=STORAGE(D2X(jfcb),44)         /* dsname       JFCBDSNM */   *|
|*    vol=STORAGE(D2X(jfcb+118),6)      /* volser       JFCBVOLS */   *|
|*    SAY 'sva='C2X(sva) 'jfcb='D2X(jfcb) 'dsn='dsn 'vol='vol         *|
|*                                                                    *|
\*--------------------------------------------------------------------*/
/*SWAREQ: PROCEDURE */
NUMERIC DIGITS 20                         /* allow up to 2**64    */
sva=C2D(ARG(1))                           /* convert to decimal   */
tcb = C2D(STORAGE(21C,4))                 /* TCB         PSATOLD  */
jscb = C2D(STORAGE(D2X(tcb+180),4))       /* JSCB        TCBJSCB  */
qmpl = C2D(STORAGE(D2X(jscb+244),4))      /* QMPL        JSCBQMPI */
/* See if qmat can be above the bar */
qmsta= C2X(STORAGE(D2X(qmpl+16),1))       /* JOB STATUS BYTE      */
if SUBSTR(X2B(qmsta),6,1) then            /* is QMQMAT64 bit on?  */
do                                        /* yes, qmat can be ATB */
  IF RIGHT(X2B(C2X(ARG(1))),1) \= '1' THEN/* SWA=BELOW ?          */
    RETURN C2D(ARG(1))+16                 /* yes, return sva+16   */
  qmat=C2D(STORAGE(D2X(qmpl+10),2))*(2**48) +,/* QMAT+0  QMADD01  */
       C2D(STORAGE(D2X(qmpl+18),2))*(2**32) +,/* QMAT+2  QMADD23  */
       C2D(STORAGE(D2X(qmpl+24),4))       /* QMAT+4      QMADD    */
  RETURN C2D(STORAGE(D2X(qmat+(sva*12)+64),4))+16
end
else
do                                        /* no, qmat is BTB      */
  IF RIGHT(C2X(ARG(1)),1) \= 'F' THEN     /* SWA=BELOW ?          */
    RETURN C2D(ARG(1))+16                 /* yes, return sva+16   */
  qmat = C2D(STORAGE(D2X(qmpl+24),4))     /* QMAT        QMADD    */
  DO WHILE sva>65536
    qmat = C2D(STORAGE(D2X(qmat+12),4))   /* next QMAT   QMAT+12  */
    sva=sva-65536                         /* 010006F -> 000006F   */
  END
  RETURN C2D(STORAGE(D2X(qmat+sva+1),4))+16
end
/*-------------------------------------------------------------------*/
Viewstem:
Procedure Expose xstring. view_header
/********************************************************************
*  This routine attempts to allocate a temporary file whose DDname  *
*  is based around the current time (in an effort to be unique).    *
*  The view header and all xstring. variables are then written to   *
*  the file and the file is then passed to ISPF view.               *
*  If everything appeared to work OK, we return TRUE otherwise we   *
*  return FALSE.                                                    *
********************************************************************/
  Parse Value Time('L') With hh ':' mm ':' ss '.' ths
  true = 1; false = 0
  p = substr('ABCDEFGHIJKLMNOPQRSTUVWXY',hh+1,1)
  viewdd = Left(p || mm || ss || ths, 8)

  Address TSO
  Signal On Error
  x = Msg('OFF')
  "ALLOC F("viewdd") SPACE(2 2) CYLINDER"
  x = Msg(x)
  Signal Off Error
  Push View_header
  "EXECIO 1 DISKW" viewdd
  "EXECIO * DISKW" viewdd "(STEM XSTRING. FINIS"
  Address ISPEXEC
  "LMINIT DATAID(VIEWID) DDNAME("viewdd")"
  "VIEW DATAID("viewid")" /*"NOMACRO"*/
  "LMFREE DATAID("viewid")"
  Address TSO "FREE FI("viewdd")"
  Return true
Error:
  Return false
/*-------------------------------------------------------------------*/
Extract_Parms:
/******************************************************************
*  Extracts parameter information.                                *
*                                                                 *
*  Available parameters are:                                      *
*  - DEBUG(trace-options)                                         *
*  - TABLE(table-name dd-var-name dsn-var-name)                   *
*  - LIBRARY(library-name)                                        *
*  - required-dd-name                                             *
*                                                                 *
*  These parameters can be supplied in any order and the default  *
*  values are:                                                    *
*      trace-options:  'O' (no tracing)                           *
*         table-name:  TIOT                                       *
*        dd-var-name:  DDNAME                                     *
*       dsn-var-name:  DSNAME                                     *
*       library-name:  (blank)                                    *
*                                                                 *
*  My thanks go to Roy Gardiner who helped me to make my          *
*  parameter processing much more simple than I had managed to    *
*  do on my own.                                                  *
******************************************************************/
  Arg Argstring
  If Pos('TABLE(', argstring) \= 0 Then
    Do
      Parse Var argstring p1 'TABLE(' tbnam tbddn tbdsn ')' p2
      tb_required = true
      argstring = p1 || p2
    End
  Else
    tb_required = false
  If Pos('LIBRARY(', argstring) \= 0 Then
    Do
      lib_required = true
      Parse Var argstring p1 'LIBRARY(' libnam ')' p2
    End
  Else
    lib_required = false
  if pos('DEBUG(',argstring) > 0 Then
    Do
      debug_required = true
      Parse Value argstring With p1 'DEBUG(' debug ')' p2
    End
  Else
    debug_required = false
  If tb_required | debug_required | lib_required Then
    reqdd  = strip(p1 || p2)
  Else
    reqdd = argstring
  If tb_required Then
    Do
      If tbnam = '' Then
        tbnam  = 'TIOT'
      If tbddn = '' Then
        tbddn  = 'DDNAME'
      If tbdsn = '' Then
        tbdsn  = 'DSNAME'
    End
  If \debug_required Then
    debug = 'O'
  Return
/*---------------------------------------------------------------------
: Examples of use of the TIOT exec                                    :
:                                                                     :
: 1.  From the command line enter TSO TIOT and you will be presented  :
:     with a list of all ddnames allocated to your session along with :
:     the associated dsnames.  Each dsname occupies one line.         :
:     The display will look something like this:                      :
:           User: userid - file allocations: all files                :
:           ISPTLIB  SYS1.SISPTENU                                    :
:                    SYS1.SISFTLIB                                    :
:                                                                     :
:           SYSIN    SYS01004.T130908.RA000.MACKEKM.R0579190          :
:                                                                     :
:           ISPMLIB  SYS1.SISPMENU                                    :
:                    SYS1.SISFMLIB                                    :
:                    .                                                :
:                    .                                                :
:                                                                     :
: 2.  From the command line enter TSO TIOT ISPPLIB and the result     :
:     will look something like this:                                  :
:           User: userid - file allocations: ISPPLIB                  :
:           ISPPLIB  SYS1.SISPPENU                                    :
:                    SYS1.SISFPLIB                                    :
:                                                                     :
: 3.  From another exec, to find what's allocated to ISPMLIB use      :
:     something like this:                                            :
:           x = Tiot('ISPMLIB')                                       :
:     and the variable x will contain something like this:            :
:           *ISPMLIB* 'SYS1.SISPMENU' 'SYS1.SISFMLIB'                 :
:                                                                     :
: 4.  Or, to use it more intelligently use something like this:       :
:           ddname = 'ISPPLIB'                                        :
:           placeholder = '*'ddname'*'                                :
:           Parse Value Tiot(ddname) With (placeholder) dslist        :
:     and dslist would contain something like this:                   :
:           'SYS1.SISPPENU' 'SYS1.SISFPLIB'                           :
:                                                                     :
: 5.  To get a full list of all allocations and parse them yourself   :
:     use:                                                            :
:           y = Tiot()                                                :
:     and the variable y will contain something like this:            :
:           *ISPTLIB*  'SYS1.SISPTENU' 'SYS1.SISFTLIB' *SYSIN*        :
:           'SYS01004.T130908.RA000.MACKEKM.R0579190' *ISPMLIB*       :
:           'SYS1.SISPMENU' 'SYS1.SISFMLIB'                           :
:     as one continuous string which you could then parse with:       :
:           Parse Var dsnlist . '*ISPMLIB*' my_list '*' .             :
:     and my_list would contain:                                      :
:           'SYS1.SISPMENU' 'SYS1.SISFMLIB'                           :
:                                                                     :
: 6.  To get a full list of all allocations into a table caled RUBBLE :
:     with the DDname variable set as BARNEY and the DSname variable  :
:     set as BETTY use:                                               :
:           TSO TIOT TABLE(RUBBLE BARNEY BETTY)                       :
:               - or -                                                :
:           x = TIOT('TABLE(RUBBLE BARNEY BETTY)')                    :
:                                                                     :
: 7.  To get a full list of all allocations into a table using the    :
:     default names of TIOT, DDNAME and DSNAME use:                   :
:           TSO TIOT TABLE()                                          :
:               - or -                                                :
:           x = TIOT('TABLE()')                                       :
:                                                                     :
: 8.  To get a list of files allocated to SYSEXEC into a table called :
:     WONKA with the default variable names of DDNAME & DSNAME use:   :
:           TSO TIOT TABLE(WONKA) SYSEXEC                             :
:               - or -                                                :
:           TSO TIOT SYSEXEC TABLE(WONKA)                             :
:               - or -                                                :
:           x = TIOT('TABLE(WONKA)' 'SYSEXEC')                        :
:               - or -                                                :
:           x = TIOT('SYSEXEC' 'TABLE(WONKA)')                        :
---------------------------------------------------------------------*/
